import { useMemo, useRef, useState } from "react";
import Editor from "@monaco-editor/react";
import { FaCode, FaBold, FaItalic, FaImage, FaTrash, FaPlus, FaBroom } from "react-icons/fa";

type Props = {
  value: string;
  onChange: (v: string) => void;
  apiBase?: string;          // ”ô–¥–µ–ø–∫—ñ: http://127.0.0.1:8000
  codeLanguage?: string;     // ”ô–¥–µ–ø–∫—ñ: "javascript"
};

type ImgItem = {
  id: string;
  previewUrl: string;        // blob: –ª–æ–∫–∞–ª –ø—Ä–µ–≤—å—é
  url?: string;              // —Å–µ—Ä–≤–µ—Ä “õ–∞–π—Ç–∞—Ä“ì–∞–Ω —Ç“±—Ä–∞“õ—Ç—ã URL
  uploading: boolean;
  error?: string;
};

export default function QuizEditor({
  value,
  onChange,
  apiBase = "http://127.0.0.1:8000",
  codeLanguage = "javascript",
}: Props) {
  type Mode = null | "code" | "image";
  const [mode, setMode] = useState<Mode>(null);

  // ----- CODE
  const [code, setCode] = useState("");

  // ----- IMAGES (–±—ñ—Ä–Ω–µ—à–µ —Å—É—Ä–µ—Ç—Ç—ñ “õ–æ–ª–¥–∞–π–¥—ã)
  const [images, setImages] = useState<ImgItem[]>([]);
  const fileRef = useRef<HTMLInputElement | null>(null);

  // helpers
  const makeId = () => Math.random().toString(36).slice(2) + Date.now().toString(36);
  const absoluteUrl = (u: string) => (u.startsWith("http") ? u : `${apiBase}${u.startsWith("/") ? "" : "/"}${u}`);

  const addBold = () => onChange((value || "") + " **–º”ô—Ç—ñ–Ω** ");
  const addItalic = () => onChange((value || "") + " *–º”ô—Ç—ñ–Ω* ");

  const clearTemp = () => {
    // —Ç–µ–∫ —É–∞“õ—ã—Ç—à–∞ –±–∞–ø—Ç–∞—É–ª–∞—Ä–¥—ã —Ç–∞–∑–∞–ª–∞—É (—Å—É—Ä–µ—Ç—Ç–µ—Ä–¥—ñ –¥–µ —Ç–∞–∑–∞–ª–∞–π–º—ã–∑)
    images.forEach((img) => URL.revokeObjectURL(img.previewUrl));
    setImages([]);
    setMode(null);
    setCode("");
    if (fileRef.current) fileRef.current.value = "";
  };

  const removeImage = (id: string) => {
    setImages((prev) => {
      const item = prev.find((x) => x.id === id);
      if (item) URL.revokeObjectURL(item.previewUrl);
      return prev.filter((x) => x.id !== id);
    });
  };

  const onPickImage = async (file: File) => {
    // 1) –ª–æ–∫–∞–ª –ø—Ä–µ–≤—å—é
    const item: ImgItem = {
      id: makeId(),
      previewUrl: URL.createObjectURL(file),
      uploading: true,
    };
    setImages((prev) => [item, ...prev]);

    // 2) —Å–µ—Ä–≤–µ—Ä–≥–µ –∂“Ø–∫—Ç–µ—É
    const fd = new FormData();
    fd.append("file", file);

    try {
      const res = await fetch(`${apiBase}/api/upload`, { method: "POST", body: fd });
      const data = await res.json();
      if (!res.ok || !data?.url) {
        throw new Error(data?.detail || "–°—É—Ä–µ—Ç –∂“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ");
      }
      const url = absoluteUrl(data.url);

      // 3) –Ω”ô—Ç–∏–∂–µ: –æ—Å—ã —Å—É—Ä–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ñ–Ω –∂–∞“£–∞—Ä—Ç—É (–∂–æ“ì–∞–ª–º–∞–π–¥—ã!)
      setImages((prev) =>
        prev.map((x) =>
          x.id === item.id ? { ...x, uploading: false, url } : x
        )
      );
      // –ù–∞–∑–∞—Ä –∞—É–¥–∞—Ä: textarea-“ì–∞ –ï–®–¢–ï“¢–ï –µ–Ω–≥—ñ–∑–±–µ–π–º—ñ–∑. –¢–µ–∫ –≥–∞–ª–µ—Ä–µ—è“ì–∞ —Å–∞“õ—Ç–∞–ª–¥—ã.
    } catch (e: any) {
      setImages((prev) =>
        prev.map((x) =>
          x.id === item.id ? { ...x, uploading: false, error: e?.message || "“ö–∞—Ç–µ" } : x
        )
      );
    } finally {
      if (fileRef.current) fileRef.current.value = "";
    }
  };

  const insertImageMarkdown = (img: ImgItem) => {
    if (!img.url) return; // ”ô–ª—ñ –∂“Ø–∫—Ç–µ–ª–º–µ–≥–µ–Ω
    onChange((value || "") + `\n![image](${img.url})\n`);
  };

  const insertCodeMarkdown = () => {
    if (!code.trim()) return;
    onChange((value || "") + `\n\`\`\`${codeLanguage}\n${code}\n\`\`\`\n`);
  };

  const hasUploading = useMemo(() => images.some((i) => i.uploading), [images]);

  return (
    <div className="card border-0 shadow-sm">
      {/* Header / Toolbar */}
      <div className="card-header bg-white d-flex justify-content-between align-items-center">
        <span className="fw-semibold">üìù –°“±—Ä–∞“õ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã</span>
        <div className="d-flex gap-2">
          {/* –ö–æ–¥ */}
          <button
            className={`btn btn-sm ${mode === "code" ? "btn-primary" : "btn-outline-secondary"}`}
            title="–ö–æ–¥"
            onClick={() => setMode(mode === "code" ? null : "code")}
          >
            <FaCode />
          </button>

          {/* –°—É—Ä–µ—Ç */}
          <button
            className={`btn btn-sm ${mode === "image" ? "btn-primary" : "btn-outline-secondary"}`}
            title="–°—É—Ä–µ—Ç"
            onClick={() => setMode(mode === "image" ? null : "image")}
          >
            <FaImage />
          </button>

          {/* “ö–∞–ª—ã“£ / –ö—É—Ä—Å–∏–≤ ‚Äî –±—ñ—Ä–¥–µ–Ω –∏–Ω—ä–µ–∫—Ü–∏—è */}
          <button className="btn btn-sm btn-outline-secondary" title="“ö–∞–ª—ã“£" onClick={addBold}>
            <FaBold />
          </button>
          <button className="btn btn-sm btn-outline-secondary" title="–ö—É—Ä—Å–∏–≤" onClick={addItalic}>
            <FaItalic />
          </button>

          {/* –ë–∞—Ä–ª—ã“ì—ã–Ω —Ç–∞–∑–∞–ª–∞—É (—É–∞“õ—ã—Ç—à–∞) */}
          <button className="btn btn-sm btn-outline-secondary" title="–ë–∞—Ä–ª—ã“ì—ã–Ω —Ç–∞–∑–∞–ª–∞—É" onClick={clearTemp}>
            <FaBroom />
          </button>
        </div>
      </div>

      {/* Body */}
      <div className="card-body">
        {/* –ù–µ–≥—ñ–∑–≥—ñ textarea (—Ç–µ–∫ ”©–∑—ñ“£ –∂–∞–∑–∞—Å—ã“£; —Å—É—Ä–µ—Ç/—Ñ–∞–π–ª –∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç—Ç—ã –∫—ñ—Ä–º–µ–π–¥—ñ) */}
        <textarea
          className="form-control mb-3"
          placeholder="–°“±—Ä–∞“õ—Ç—ã“£ –º”ô—Ç—ñ–Ω—ñ (Markdown “õ–æ–ª–¥–∞–π–¥—ã)‚Ä¶"
          rows={5}
          value={value}
          onChange={(e) => onChange(e.target.value)}
        />

        {/* CODE —Ä–µ–∂–∏–º—ñ */}
        {mode === "code" && (
          <div className="border rounded mb-3">
            <Editor
              height="220px"
              theme="vs-dark"
              defaultLanguage={codeLanguage}
              value={code}
              onChange={(v) => setCode(v || "")}
              options={{
                minimap: { enabled: false },
                fontSize: 13,
                lineNumbers: "on",
                scrollBeyondLastLine: false,
              }}
            />
            <div className="p-2 d-flex justify-content-end gap-2">
              <button className="btn btn-sm btn-outline-secondary" onClick={() => setMode(null)}>
                –ñ–∞–±—É
              </button>
              <button className="btn btn-sm btn-primary" onClick={insertCodeMarkdown}>
                –ö–æ–¥—Ç—ã —Å“±—Ä–∞“õ“õ–∞ “õ–æ—Å—É
              </button>
            </div>
          </div>
        )}

        {/* IMAGE —Ä–µ–∂–∏–º—ñ */}
        {mode === "image" && (
          <div className="p-3 border rounded mb-3">
            <div className="d-flex align-items-center gap-2">
              <input
                ref={fileRef}
                type="file"
                accept="image/png,image/jpeg,image/jpg,image/gif,image/webp"
                className="form-control"
                onChange={(e) => {
                  const f = e.target.files?.[0];
                  if (f) onPickImage(f);
                }}
              />
              <button className="btn btn-outline-secondary" onClick={() => setMode(null)} disabled={hasUploading}>
                –ñ–∞–±—É
              </button>
            </div>
            <small className="text-muted d-block mt-2">
              –§–∞–π–ª —Ç–∞“£–¥–∞—Å–∞“£ ‚Äî –±—ñ—Ä–¥–µ–Ω –∂“Ø–∫—Ç–µ–ª–µ–¥—ñ. –°–æ–¥–∞–Ω –∫–µ–π—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ –≥–∞–ª–µ—Ä–µ—è–¥–∞–Ω ‚Äú–°“±—Ä–∞“õ“õ–∞ “õ–æ—Å—É‚Äù –±–∞—Ç—ã—Ä–º–∞—Å—ã–º–µ–Ω –µ–Ω–≥—ñ–∑.
            </small>
          </div>
        )}

        {/* –ì–∞–ª–µ—Ä–µ—è: —Å—É—Ä–µ—Ç—Ç–µ—Ä ”ô—Ä“õ–∞—à–∞–Ω –∫”©—Ä—ñ–Ω–µ–¥—ñ, –∂–æ“ì–∞–ª—ã–ø –∫–µ—Ç–ø–µ–π–¥—ñ */}
        {images.length > 0 && (
          <>
            <div className="d-flex align-items-center justify-content-between mb-2">
              <span className="fw-semibold">–°—É—Ä–µ—Ç—Ç–µ—Ä</span>
              <small className="text-muted">{hasUploading ? "–ñ“Ø–∫—Ç–µ–ª—É–¥–µ‚Ä¶" : "–î–∞–π—ã–Ω"}</small>
            </div>

            <div className="row g-3">
              {images.map((img) => (
                <div className="col-sm-6 col-md-4 col-lg-3" key={img.id}>
                  <div className="border rounded p-2 h-100 d-flex flex-column">
                    <div className="ratio ratio-4x3 mb-2" style={{ backgroundColor: "#f8f9fa" }}>
                      {img.error ? (
                        <div className="d-flex align-items-center justify-content-center text-danger small">
                          {img.error}
                        </div>
                      ) : (
                        <img
                          src={img.url || img.previewUrl}
                          alt="preview"
                          style={{ objectFit: "cover", borderRadius: 6 }}
                        />
                      )}
                    </div>

                    <div className="d-flex gap-2 mt-auto">
                      <button
                        className="btn btn-sm btn-outline-danger"
                        title="”®—à—ñ—Ä—É"
                        onClick={() => removeImage(img.id)}
                        disabled={img.uploading}
                      >
                        <FaTrash />
                      </button>

                      <button
                        className="btn btn-sm btn-outline-primary flex-grow-1"
                        title="–°“±—Ä–∞“õ“õ–∞ “õ–æ—Å—É (Markdown)"
                        onClick={() => insertImageMarkdown(img)}
                        disabled={img.uploading || !img.url}
                      >
                        <FaPlus className="me-1" /> –°“±—Ä–∞“õ“õ–∞ “õ–æ—Å—É
                      </button>
                    </div>

                    {img.uploading && (
                      <small className="text-muted mt-2">–ñ“Ø–∫—Ç–µ–ª—É–¥–µ‚Ä¶</small>
                    )}
                    {!img.uploading && img.url && (
                      <small className="text-muted mt-2 text-truncate" title={img.url}>
                        {img.url}
                      </small>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </>
        )}
      </div>
    </div>
  );
}
